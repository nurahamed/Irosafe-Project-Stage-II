
/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPL3ZIDhi4Ld"
#define BLYNK_TEMPLATE_NAME "Irotech"

#define BLYNK_AUTH_TOKEN "jfRU5VlCEeRLl2ojLhlDoi3D9Cvho3_F"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

//gryoscope set up
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
Adafruit_MPU6050 mpu;

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "JioFiber@4g"; // Change to your WiFi SSID
char pass[] = "7003072029"; // Change to your WiFi password
char auth[] = BLYNK_AUTH_TOKEN;



#define VPIN_BUTTON V1
#define RelayPin 26 // D23
#define wifiConnectedPin 5
#define RelayDisconnected 18
#define wifiConnectingPin 19


int wifiFlag = 0;
//BlynkTimer timer;

bool relayCondition = true;
bool toggleState_1 = HIGH;

// wifi connection status 
void checkBlynkStatus() {
  bool isconnected = Blynk.connected();
  if (isconnected == false) {
    Serial.println("Blynk Not Connected");
  }
  if (isconnected == true) {

    Serial.println("Blynk Connected");
  }
}


// wifi connection status end


BLYNK_WRITE(V1){
  bool value1 = param.asInt();
  if (value1 == 1 && relayCondition){
    digitalWrite(RelayPin, toggleState_1);
    
  }else{
    digitalWrite(RelayPin, !toggleState_1);
    }
}


void setup()
{
  // Debug console
  pinMode(RelayPin, OUTPUT);
  pinMode(wifiConnectedPin, OUTPUT);
  pinMode(wifiConnectingPin, OUTPUT);
  pinMode(RelayDisconnected, OUTPUT);

  // Turn off both LEDs initially
  digitalWrite(wifiConnectingPin, LOW);
  digitalWrite(wifiConnectedPin, LOW);
  
  
  
  //mpu code
Serial.begin(115200);
  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
    Serial.println("MPU6050 Found!");

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);

   //mpu code end
   
  
  Blynk.begin(auth, ssid, pass);
//  timer.setInterval(2000L, checkBlynkStatus);  check if Blynk server is connected every 2 seconds
 
  delay(1000);
  

}

void loop()
{

// Check WiFi status
  if (WiFi.status() != WL_CONNECTED) {
    // Blink the "connecting" LED
    digitalWrite(wifiConnectingPin, HIGH);
    delay(125); // Blink 4 times per second (125ms on, 125ms off)
    digitalWrite(wifiConnectingPin, LOW);
    delay(125);
    digitalWrite(wifiConnectedPin, LOW);
  } else {
    // Turn on the "connected" LED
    digitalWrite(wifiConnectingPin, LOW);
    digitalWrite(wifiConnectedPin, HIGH);
    
    // Print the IP address only once
    static bool ipDisplayed = false;
    if (!ipDisplayed) {
      Serial.println("Connected!");
      Serial.print("IP Address: ");
      Serial.println(WiFi.localIP());
      ipDisplayed = true;
    }
  }
  
  // mpu code
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  /* Print out the values */
  Serial.print("X: ");
  Serial.print(a.acceleration.x);
  
  Serial.print(",Y: ");
  Serial.print(a.acceleration.y);
  
  Serial.print(",Z: ");
  Serial.print(a.acceleration.z);
  
  int x_axis = a.acceleration.x;
  int y_axis = a.acceleration.y;
  int z_axis = a.acceleration.z;

//  if(x_axis >= 0){
//    digitalWrite(RelayPin, toggleState_1);
//    } else if (y_axis >0){
//      digitalWrite(RelayPin, toggleState_1);
//      }else if(z_axis >0){
//        digitalWrite(RelayPin, toggleState_1);
//        }
//        else{
//          digitalWrite(RelayPin, toggleState_1);
//          }
          
//  Serial.println(" m/s^2");


  Serial.println("Rotation X: ");
  Serial.print(g.gyro.x);
  Serial.print(", Y: ");
  Serial.print(g.gyro.y);
  Serial.print(", Z: ");
  Serial.print(g.gyro.z);
  Serial.println(" rad/s");

  Serial.print("Temperature: ");
  Serial.print(temp.temperature);
  Serial.println(" degC");

  Serial.println("");
  delay(500);
  //mpu code end
  
  Blynk.run();
//  timer.run();
}
